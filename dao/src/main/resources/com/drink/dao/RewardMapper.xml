<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.drink.dao.RewardMapper">
  <resultMap id="BaseResultMap" type="com.drink.model.Reward">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="memberserialnumber" jdbcType="VARCHAR" property="memberserialnumber" />
    <result column="rewardmoney" jdbcType="INTEGER" property="rewardmoney" />
    <result column="rewardtime" jdbcType="DATE" property="rewardtime" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="createuser" jdbcType="BIGINT" property="createuser" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="level" jdbcType="TINYINT" property="level" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from reward
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.drink.model.Reward">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into reward (id, memberserialnumber, rewardmoney, 
      rewardtime, createtime, createuser, 
      type, status, level
      )
    values (#{id,jdbcType=BIGINT}, #{memberserialnumber,jdbcType=VARCHAR}, #{rewardmoney,jdbcType=INTEGER}, 
      #{rewardtime,jdbcType=DATE}, #{createtime,jdbcType=TIMESTAMP}, #{createuser,jdbcType=BIGINT}, 
      #{type,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{level,jdbcType=TINYINT}
      )
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.drink.model.Reward">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update reward
    set memberserialnumber = #{memberserialnumber,jdbcType=VARCHAR},
      rewardmoney = #{rewardmoney,jdbcType=INTEGER},
      rewardtime = #{rewardtime,jdbcType=DATE},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      createuser = #{createuser,jdbcType=BIGINT},
      type = #{type,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      level = #{level,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, memberserialnumber, rewardmoney, rewardtime, createtime, createuser, type, 
    status, level
    from reward
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, memberserialnumber, rewardmoney, rewardtime, createtime, createuser, type, 
    status, level
    from reward
  </select>
  <insert id="insertReward" parameterType="com.drink.model.Reward">
    insert into reward (memberserialnumber, rewardmoney,
    rewardtime, createtime, createuser,
    type, status, level
    )
    values (#{memberserialnumber,jdbcType=VARCHAR}, #{rewardmoney,jdbcType=INTEGER},
    #{rewardtime,jdbcType=DATE}, #{createtime,jdbcType=TIMESTAMP}, #{createuser,jdbcType=BIGINT},
    #{type,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{level,jdbcType=TINYINT}
    )
  </insert>
    <select id="selectBySerialNumber" resultType="com.drink.model.Reward">
        select id, memberserialnumber, rewardmoney, rewardtime, createtime, createuser, type,status
        from reward where memberserialnumber=#{serialnumber} and rewardtime=#{rewardtime}
    </select>
    <update id="updateStatusBySerialnumber">
        update reward set status=1 where memberserialnumber=#{serialnumber} and rewardtime=#{rewardtime}
    </update>
    <select id="findCountByCondition" parameterType="com.drink.module.member.RewordVo" resultType="java.lang.Integer">
      SELECT count(m.id) FROM member m
      left join reward r on (r.memberserialnumber=m.serialnumber)
      where 1=1
      <if test="memberName!=null and memberName!=''">
          and m.name like "%"#{memberName}"%"
      </if>
      <if test="memberserialnumber!=null and memberserialnumber!=''">
          and m.serialnumber=#{memberserialnumber}
      </if>

        <if test="(startDate!=null and startDate!='') and (endDate==null or endDate=='')">
            and <![CDATA[r.rewardtime>=#{startDate} ]]>
        </if>
        <if test="(startDate==null or startDate=='') and (endDate!=null or endDate!='')">
            and <![CDATA[r.rewardtime<=#{endDate} ]]>
        </if>
        <if test="(startDate!=null and startDate!='') and (endDate!=null or endDate!='')">
            and (<![CDATA[r.rewardtime>=#{startDate} ]]> and <![CDATA[r.rewardtime<=#{endDate} ]]>)
        </if>
      group by m.serialnumber, r.level
    </select>
    <select id="findDataByCondition" parameterType="com.drink.module.member.RewordVo" resultType="com.drink.module.member.RewordVo">
      SELECT m.serialnumber as memberserialnumber,m.name as memberName,ifnull(sum(r.rewardmoney),0),r.level,,r.rewardtime,r.status
      FROM member m
      left join reward r on (r.memberserialnumber=m.serialnumber)
        where 1=1
        <if test="memberName!=null and memberName!=''">
            and m.name like "%"#{memberName}"%"
        </if>
        <if test="memberserialnumber!=null and memberserialnumber!=''">
            and m.serialnumber=#{memberserialnumber}
        </if>

        <if test="(startDate!=null and startDate!='') and (endDate==null or endDate=='')">
            and <![CDATA[r.rewardtime>=#{startDate} ]]>
        </if>
        <if test="(startDate==null or startDate=='') and (endDate!=null or endDate!='')">
            and <![CDATA[r.rewardtime<=#{endDate} ]]>
        </if>
        <if test="(startDate!=null and startDate!='') and (endDate!=null or endDate!='')">
            and (<![CDATA[r.rewardtime>=#{startDate} ]]> and <![CDATA[r.rewardtime<=#{endDate} ]]>)
        </if>
        group by m.serialnumber, r.level
        order by m.serialnumber asc,r.level asc  limit #{start} , #{limit}
    </select>
    <select id="selectEveryDayMoney" resultType="com.drink.module.member.RewordVo">
      select r.rewardtime,sum(r.rewardmoney)as rewardmoney,r.status,r.memberserialnumber from reward r where r.memberserialnumber=#{serialnumber}
      group by r.memberserialnumber,r.rewardtime
    </select>
  <select id="findAllRewardBySerialNumber" resultType="java.lang.Integer">
      SELECT sum(rewardmoney) from reward where memberserialnumber=#{serialnumber}
  </select>
  <select id="findCountBySerialNumber" parameterType="com.drink.module.member.RewordVo" resultType="java.lang.Integer">
      select count(id)
      from(
          SELECT  id
          from reward
          where memberserialnumber=#{memberserialnumber}
          GROUP BY rewardtime
          ) as tmpTable
  </select>
  <select id="findDataBySerialNumber" parameterType="com.drink.module.member.RewordVo" resultType="com.drink.module.member.RewordVo">
    SELECT  rewardtime,sum(rewardmoney) as totalMoney
    from reward
    where memberserialnumber=#{memberserialnumber}
    GROUP BY rewardtime
    ORDER BY rewardtime DESC
  </select>
</mapper>